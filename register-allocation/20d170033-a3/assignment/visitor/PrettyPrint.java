//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class PrettyPrint implements GJVisitor<String, Integer> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public String visit(NodeList n, Integer argu) {
        String _ret = null;
        Integer _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeListOptional n, Integer argu) {
        if (n.present()) {
            String _ret = null;
            Integer _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this, argu);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public String visit(NodeOptional n, Integer argu) {
        if (n.present())
            return n.node.accept(this, argu);
        else
            return null;
    }

    public String visit(NodeSequence n, Integer argu) {
        String _ret = null;
        Integer _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeToken n, Integer argu) {
        return null;
    }

    public static boolean DEBUG = true;
    public List<String> prettyPrint;
    public Integer indent;
    public String currentClass;
    public String currentMethod;
    Map<String, ClassInfo> classInfoMap;

    public PrettyPrint(Map<String, ClassInfo> classInfoMap) {
        prettyPrint = new ArrayList<>();
        indent = 0;
        this.classInfoMap = classInfoMap;
    }

    public void printCode() {
        for (String line : prettyPrint) {
            System.out.print(line);
        }
    }

    public String getTabs(int indent) {
        return "\t".repeat(indent);
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> <REGLIMIT>
     * f1 -> MainClass()
     * f2 -> ( TypeDeclaration() )*
     * f3 -> <EOF>
     */
    public String visit(Goal n, Integer argu) {
        String _ret = null;
        prettyPrint.add(n.f0.tokenImage + '\n');
        prettyPrint.add("import static a3.Memory.*;\n");
        n.f1.accept(this, 0);
        n.f2.accept(this, 0);
        n.f3.accept(this, 0);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public String visit(MainClass n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        currentClass = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        prettyPrint.add("public class " + currentClass + " {\n");
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        currentMethod = n.f6.tokenImage;
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        prettyPrint.add("\tpublic static void " + currentMethod + "(String[] " + n.f11.accept(this, argu) + ") {\n");
        n.f14.accept(this, 2);
        ClassInfo classInfo = classInfoMap.get(currentClass);
        MethodInfo methodInfo = classInfo.methods.get(currentMethod);
        RegAlloc regAlloc = methodInfo.methodRegAlloc;
        prettyPrint.add("\t\talloca(" + regAlloc.spillCount + ");\n");
        n.f15.accept(this, 2);
        n.f16.accept(this, argu);
        n.f17.accept(this, argu);
        prettyPrint.add("\t}\n");
        prettyPrint.add("}\n");
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     * | ClassExtendsDeclaration()
     */
    public String visit(TypeDeclaration n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public String visit(ClassDeclaration n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        currentClass = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        prettyPrint.add("public class " + currentClass + " {\n");
        n.f3.accept(this, 1);
        n.f4.accept(this, 1);
        n.f5.accept(this, argu);
        prettyPrint.add("}\n");
        currentClass = null;
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public String visit(ClassExtendsDeclaration n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        currentClass = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String parent = n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        prettyPrint.add("public class " + currentClass + " extends " + parent + " {\n");
        n.f5.accept(this, 1);
        n.f6.accept(this, 1);
        n.f7.accept(this, argu);
        prettyPrint.add("}\n");
        currentClass = null;
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public String visit(VarDeclaration n, Integer argu) {
        String _ret = null;
        String type = n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        if (currentMethod == null) {
            prettyPrint.add(getTabs(argu) + type + " " + id + ";\n");
        } else {
            ClassInfo classInfo = classInfoMap.get(currentClass);
            MethodInfo methodInfo = classInfo.methods.get(currentMethod);
            RegAlloc regAlloc = methodInfo.methodRegAlloc;
            Map<String, Integer> regColoring = regAlloc.currInterferenceGraph.regColors;
            if (regColoring.containsKey(id)) {
                if (regColoring.get(id) != -1) {
                    String regName = "r" + regColoring.get(id);
                    if (!regAlloc.registerMap.keySet().contains(id)) {
                        regAlloc.registerMap.put(id, regName);
                    }
                    if (!methodInfo.registers.contains(regName)) {
                        prettyPrint.add(getTabs(argu) + "Object " + regName + ";\n");
                        methodInfo.registers.add(regName);
                    }
                } else {
                    String regName = "m" + regAlloc.currSpill;
                    if (!regAlloc.registerMap.keySet().contains(id)) {
                        regAlloc.registerMap.put(id, regName);
                        regAlloc.currSpill++;
                    }
                }
            }
        }
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */
    public String visit(MethodDeclaration n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String type = n.f1.accept(this, argu);
        currentMethod = n.f2.accept(this, argu);
        prettyPrint.add(getTabs(argu) + "public " + type + " " + currentMethod + "(");
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        prettyPrint.add(") {\n");
        n.f6.accept(this, argu);
        n.f7.accept(this, argu + 1);
        ClassInfo classInfo = classInfoMap.get(currentClass);
        MethodInfo methodInfo = classInfo.methods.get(currentMethod);
        RegAlloc regAlloc = methodInfo.methodRegAlloc;
        prettyPrint.add("\t\talloca(" + regAlloc.spillCount + ");\n");
        n.f8.accept(this, argu + 1);
        n.f9.accept(this, argu);
        String retId = n.f10.accept(this, argu);
        prettyPrint.add(getTabs(argu + 1) + "return " + retId + ";\n");
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        prettyPrint.add(getTabs(argu) + "}\n");
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public String visit(FormalParameterList n, Integer argu) {
        String _ret = null;
        String s1 = n.f0.accept(this, argu);
        prettyPrint.add(s1);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public String visit(FormalParameter n, Integer argu) {
        String _ret = null;
        String s1 = n.f0.accept(this, argu);
        String s2 = n.f1.accept(this, argu);
        _ret = s1 + " " + s2;
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public String visit(FormalParameterRest n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String s2 = n.f1.accept(this, argu);
        prettyPrint.add(", " + s2);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     * | BooleanType()
     * | IntegeregerType()
     * | FloatType()
     * | Identifier()
     */
    public String visit(Type n, Integer argu) {
        String _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public String visit(ArrayType n, Integer argu) {
        String _ret = "int[]";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "float"
     */
    public String visit(FloatType n, Integer argu) {
        String _ret = "float";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "boolean"
     */
    public String visit(BooleanType n, Integer argu) {
        String _ret = "boolean";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     */
    public String visit(IntegerType n, Integer argu) {
        String _ret = "int";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Block()
     * | AssignmentStatement()
     * | ArrayAssignmentStatement()
     * | FieldAssignmentStatement()
     * | IfStatement()
     * | WhileStatement()
     * | PrIntegerStatement()
     * | LivenessQueryStatement()
     */
    public String visit(Statement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public String visit(Block n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public String visit(AssignmentStatement n, Integer argu) {
        String _ret = null;
        ClassInfo classInfo = classInfoMap.get(currentClass);
        MethodInfo methodInfo = classInfo.methods.get(currentMethod);
        RegAlloc regAlloc = methodInfo.methodRegAlloc;
        String id = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr = n.f2.accept(this, argu);
        if (regAlloc.registerMap.keySet().contains(id)) {
            id = regAlloc.registerMap.get(id);
            if (id.charAt(0) == 'r') {
                prettyPrint.add(getTabs(argu) + id + " = (" + expr + ");\n");
            } else {
                String memAddr = id.substring(1, id.length());
                prettyPrint.add(getTabs(argu) + "store(" + memAddr + ", (" + expr + "));\n");
            }
        }
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Identifier()
     * f6 -> ";"
     */
    public String visit(ArrayAssignmentStatement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Identifier()
     * f5 -> ";"
     */
    public String visit(FieldAssignmentStatement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IfthenElseStatement()
     * | IfthenStatement()
     */
    public String visit(IfStatement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(IfthenStatement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public String visit(IfthenElseStatement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(WhileStatement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "System.out.prIntegerln"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> ";"
     */
    public String visit(PrintStatement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <LIVENESSQUERY>
     * f2 -> <SCOMMENT2>
     */
    public String visit(LivenessQueryStatement n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> OrExpression()
     * | AndExpression()
     * | CompareExpression()
     * | neqExpression()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | DivExpression()
     * | ArrayLookup()
     * | ArrayLength()
     * | MessageSend()
     * | PrimaryExpression()
     */
    public String visit(Expression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "&&"
     * f2 -> Identifier()
     */
    public String visit(AndExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "||"
     * f2 -> Identifier()
     */
    public String visit(OrExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "<="
     * f2 -> Identifier()
     */
    public String visit(CompareExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "!="
     * f2 -> Identifier()
     */
    public String visit(neqExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "+"
     * f2 -> Identifier()
     */
    public String visit(PlusExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "-"
     * f2 -> Identifier()
     */
    public String visit(MinusExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "*"
     * f2 -> Identifier()
     */
    public String visit(TimesExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "/"
     * f2 -> Identifier()
     */
    public String visit(DivExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     */
    public String visit(ArrayLookup n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public String visit(ArrayLength n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public String visit(MessageSend n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public String visit(ArgList n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public String visit(ArgRest n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     * | FloatLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ThisExpression()
     * | ArrayAllocationExpression()
     * | AllocationExpression()
     * | NotExpression()
     */
    public String visit(PrimaryExpression n, Integer argu) {
        String _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <Integer_LITERAL>
     */
    public String visit(IntegerLiteral n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        _ret = n.f0.tokenImage;
        return _ret;
    }

    /**
     * f0 -> <FLOAT_LITERAL>
     */
    public String visit(FloatLiteral n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        _ret = n.f0.tokenImage;
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public String visit(TrueLiteral n, Integer argu) {
        String _ret = "true";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public String visit(FalseLiteral n, Integer argu) {
        String _ret = "false";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Identifier n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        _ret = n.f0.tokenImage;
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public String visit(ThisExpression n, Integer argu) {
        String _ret = "this";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public String visit(ArrayAllocationExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String id = n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        _ret = "new int[" + id + "]";
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public String visit(AllocationExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        _ret = "new " + id + "()";
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public String visit(NotExpression n, Integer argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        _ret = '!' + n.f1.accept(this, argu);
        return _ret;
    }

}
