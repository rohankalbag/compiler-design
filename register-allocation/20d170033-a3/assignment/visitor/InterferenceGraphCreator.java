//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class InterferenceGraphCreator implements GJNoArguVisitor<String> {
   HashMap<Node, Set<String>> resultMap;
   int maxReg;
   String currentMethod;
   String currentClass;

   Map<String, ClassInfo> classInfoMap = new LinkedHashMap<>();
   RegAlloc currentMethodRegAlloc;

   public static boolean DEBUG = true;

   public void addConflicts(Set<String> liveSet) {
      if (liveSet.size() > 1) {
         for (String x : liveSet) {
            for (String y : liveSet) {
               if (!x.equals(y) && currentMethodRegAlloc.currInterferenceGraph.adjList.containsKey(x)
                     && currentMethodRegAlloc.currInterferenceGraph.adjList.containsKey(y)) {
                  boolean newEdge = currentMethodRegAlloc.currInterferenceGraph.addEdge(x, y);
                  if (DEBUG && newEdge) {
                     System.out.println("\t\tAdded Edge : (" + x + "," + y + ")");
                  }
               }
            }
         }
      }
   }

   public InterferenceGraphCreator(HashMap<Node, Set<String>> r) {
      resultMap = r;
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n) {
      if (n.present()) {
         String _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public String visit(NodeOptional n) {
      if (n.present())
         return n.node.accept(this);
      else
         return null;
   }

   public String visit(NodeSequence n) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( <REGLIMIT> )?
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public String visit(Goal n) {
      String _ret = null;
      if (n.f0 != null) {
         maxReg = Integer.valueOf(n.f0.tokenImage.substring(2, n.f0.tokenImage.length() - 2));
         if (DEBUG)
            System.out.println("Max Reg : " + maxReg);
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public String visit(MainClass n) {
      String _ret = null;
      n.f0.accept(this);
      currentClass = n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      currentMethod = "main";
      if (DEBUG) {
         System.out.println("Entered Method : " + currentClass + "::" + currentMethod);
      }
      ClassInfo currClassInfo = new ClassInfo();
      classInfoMap.put(currentClass, currClassInfo);
      MethodInfo currMethodInfo = new MethodInfo();
      currClassInfo.methods.put(currentMethod, currMethodInfo);
      currentMethodRegAlloc = new RegAlloc(maxReg);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      n.f17.accept(this);
      currMethodInfo.methodRegAlloc = currentMethodRegAlloc;
      if (DEBUG) {
         System.out.println("Interference Graph Created for: " + currentClass + "::" + currentMethod);
      }
      if (DEBUG) {
         System.out.println("Performing Kempe Heuristic");
      }
      currMethodInfo.methodRegAlloc.performKempeHeuristic();
      currentClass = null;
      currentMethod = null;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    * | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n) {
      String _ret = null;
      n.f0.accept(this);
      currentClass = n.f1.accept(this);
      ClassInfo currClassInfo = new ClassInfo();
      currClassInfo.parent = null;
      classInfoMap.put(currentClass, currClassInfo);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n) {
      String _ret = null;
      n.f0.accept(this);
      currentClass = n.f1.accept(this);
      n.f2.accept(this);
      String parentClass = n.f3.accept(this);
      ClassInfo currClassInfo = new ClassInfo();
      currClassInfo.parent = parentClass;
      classInfoMap.put(currentClass, currClassInfo);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n) {
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tVarDeclaration : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      String _ret = null;
      String type = n.f0.accept(this);
      String id = n.f1.accept(this);
      if (currentMethod != null) {
         currentMethodRegAlloc.currInterferenceGraph.addNode(id, type);
         if (DEBUG) {
            System.out.println("\t\tAdded Node : " + id + " of type : " + type);
         }
      }
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      currentMethod = n.f2.accept(this);
      if (DEBUG) {
         System.out.println("Entered Method : " + currentClass + "::" + currentMethod);
      }
      ClassInfo currClassInfo = classInfoMap.get(currentClass);
      MethodInfo currMethodInfo = new MethodInfo();
      currClassInfo.methods.put(currentMethod, currMethodInfo);
      currentMethodRegAlloc = new RegAlloc(maxReg);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tMethod Return : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);

         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      currMethodInfo.methodRegAlloc = currentMethodRegAlloc;
      if (DEBUG) {
         System.out.println("Interference Graph Created for: " + currentClass + "::" + currentMethod);
      }

      if (DEBUG) {
         System.out.println("Performing Kempe Heuristic");
      }
      currMethodInfo.methodRegAlloc.performKempeHeuristic();

      currentMethod = null;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n) {
      String _ret = null;
      MethodInfo currMethodInfo = classInfoMap.get(currentClass).methods.get(currentMethod);
      currMethodInfo.parameters.add(n.f0.accept(this));
      if (DEBUG) {
         System.out.println("\tAdded parameter : " + n.f0.accept(this));
      }
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n) {
      String _ret = null;
      n.f0.accept(this);
      _ret = n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n) {
      String _ret = null;
      MethodInfo currMethodInfo = classInfoMap.get(currentClass).methods.get(currentMethod);
      n.f0.accept(this);
      currMethodInfo.parameters.add(n.f1.accept(this));
      if (DEBUG) {
         System.out.println("\tAdded parameter : " + n.f1.accept(this));
      }
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    * | BooleanType()
    * | StringType()
    * | FloatType()
    * | Identifier()
    */
   public String visit(Type n) {
      String _ret = null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n) {
      String _ret = "int[]";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "float"
    */
   public String visit(FloatType n) {
      String _ret = "float";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n) {
      String _ret = "boolean";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n) {
      String _ret = "int";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    * | AssignmentStatement()
    * | ArrayAssignmentStatement()
    * | FieldAssignmentStatement()
    * | IfStatement()
    * | WhileStatement()
    * | PrintStatement()
    * | LivenessQueryStatement()
    */
   public String visit(Statement n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n) {
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tAssignmentStatement : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n) {
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tArrayAssignmentStatement : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public String visit(FieldAssignmentStatement n) {
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tFieldAssignmentStatement : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    * | IfthenStatement()
    */
   public String visit(IfStatement n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(IfthenStatement n) {
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tIfthenStatement : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfthenElseStatement n) {
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tIfthenElseStatement : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n) {
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tWhileStatement : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n) {
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tPrintStatement : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LIVENESSQUERY>
    * f2 -> <SCOMMENT2>
    */
   public String visit(LivenessQueryStatement n) {
      String _ret = null;
      if (DEBUG) {
         if (resultMap.containsKey(n)) {
            System.out.println("\tLivenessQueryStatement : " + resultMap.get(n));
            Set<String> liveSet = resultMap.get(n);
            addConflicts(liveSet);
         } else {
            System.err.println("\tLivenessQueryStatement missing: " + n);
         }
      }

      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    * | AndExpression()
    * | CompareExpression()
    * | neqExpression()
    * | PlusExpression()
    * | MinusExpression()
    * | TimesExpression()
    * | DivExpression()
    * | ArrayLookup()
    * | ArrayLength()
    * | MessageSend()
    * | PrimaryExpression()
    */
   public String visit(Expression n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public String visit(AndExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "||"
    * f2 -> Identifier()
    */
   public String visit(OrExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<="
    * f2 -> Identifier()
    */
   public String visit(CompareExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "!="
    * f2 -> Identifier()
    */
   public String visit(neqExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public String visit(PlusExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public String visit(MinusExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public String visit(TimesExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public String visit(DivExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public String visit(ArgList n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public String visit(ArgRest n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | FloatLiteral()
    * | TrueLiteral()
    * | FalseLiteral()
    * | Identifier()
    * | ThisExpression()
    * | ArrayAllocationExpression()
    * | AllocationExpression()
    * | NotExpression()
    */
   public String visit(PrimaryExpression n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <FLOAT_LITERAL>
    */
   public String visit(FloatLiteral n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n) {
      String _ret = n.f0.tokenImage;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public String visit(NotExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

}
