/* Generated By:JavaCC: Do not edit this line. FriendTJMem.java */
import syntaxtree.*;
import java.util.Vector;


public class FriendTJMem implements FriendTJMemConstants {

  static final public Goal Goal() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   MainClass n4;
   NodeListOptional n5 = new NodeListOptional();
   TypeDeclaration n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(REGLIMIT);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(TOP_IMPORT);
                     n2 = JTBToolkit.makeNodeToken(n3);
    n4 = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n6 = TypeDeclaration();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n8 = jj_consume_token(0);
      n8.beginColumn++; n8.endColumn++;
      n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Goal(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeListOptional n26 = new NodeListOptional();
   VarDeclaration n27;
   NodeToken n28;
   Token n29;
   NodeListOptional n30 = new NodeListOptional();
   Statement n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(PUBLIC);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(STATIC);
                 n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(VOID);
                n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(MAIN);
                n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(LPAREN);
             n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(STRING);
                  n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(LSQPAREN);
             n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(RSQPAREN);
             n19 = JTBToolkit.makeNodeToken(n20);
    n21 = Identifier();
    n23 = jj_consume_token(RPAREN);
             n22 = JTBToolkit.makeNodeToken(n23);
    n25 = jj_consume_token(LBRACE);
             n24 = JTBToolkit.makeNodeToken(n25);
    label_2:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_2;
      }
      n27 = VarDeclaration();
        n26.addNode(n27);
    }
     n26.nodes.trimToSize();
    n29 = jj_consume_token(ALLOCA);
                  n28 = JTBToolkit.makeNodeToken(n29);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MEM_STORE:
      case LBRACE:
      case IF:
      case WHILE:
      case PRINT:
      case SCOMMENT1:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_3;
      }
      n31 = Statement();
        n30.addNode(n31);
    }
     n30.nodes.trimToSize();
    n33 = jj_consume_token(RBRACE);
             n32 = JTBToolkit.makeNodeToken(n33);
    n35 = jj_consume_token(RBRACE);
             n34 = JTBToolkit.makeNodeToken(n35);
     {if (true) return new MainClass(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n21,n22,n24,n26,n28,n30,n32,n34);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeDeclaration TypeDeclaration() throws ParseException {
   NodeChoice n0;
   ClassDeclaration n1;
   ClassExtendsDeclaration n2;
    if (jj_2_2(3)) {
      n1 = ClassDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        n2 = ClassExtendsDeclaration();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new TypeDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclaration ClassDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   VarDeclaration n6;
   NodeListOptional n7 = new NodeListOptional();
   MethodDeclaration n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER_OBJECT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      n6 = VarDeclaration();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      n8 = MethodDeclaration();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    n10 = jj_consume_token(RBRACE);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ClassDeclaration(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassExtendsDeclaration ClassExtendsDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDeclaration n9;
   NodeListOptional n10 = new NodeListOptional();
   MethodDeclaration n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(EXTENDS);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    n7 = jj_consume_token(LBRACE);
            n6 = JTBToolkit.makeNodeToken(n7);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER_OBJECT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      n9 = VarDeclaration();
        n8.addNode(n9);
    }
     n8.nodes.trimToSize();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      n11 = MethodDeclaration();
        n10.addNode(n11);
    }
     n10.nodes.trimToSize();
    n13 = jj_consume_token(RBRACE);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new ClassExtendsDeclaration(n0,n2,n3,n5,n6,n8,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDeclaration VarDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(REGISTER_OBJECT);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new VarDeclaration(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclaration MethodDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   FormalParameterList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDeclaration n13;
   NodeToken n14;
   Token n15;
   NodeListOptional n16 = new NodeListOptional();
   Statement n17;
   NodeToken n18;
   Token n19;
   NodeChoice n20;
   Identifier n21;
   RegisterLoad n22;
   MemoryLoad n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT_TYPE:
    case INT_TYPE:
    case BOOLEAN_TYPE:
    case IDENTIFIER:
      n7 = FormalParameterList();
        n6.addNode(n7);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(LBRACE);
             n10 = JTBToolkit.makeNodeToken(n11);
    label_8:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_8;
      }
      n13 = VarDeclaration();
        n12.addNode(n13);
    }
     n12.nodes.trimToSize();
    n15 = jj_consume_token(ALLOCA);
                  n14 = JTBToolkit.makeNodeToken(n15);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MEM_STORE:
      case LBRACE:
      case IF:
      case WHILE:
      case PRINT:
      case SCOMMENT1:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_9;
      }
      n17 = Statement();
        n16.addNode(n17);
    }
     n16.nodes.trimToSize();
    n19 = jj_consume_token(RETURN);
                  n18 = JTBToolkit.makeNodeToken(n19);
    if (jj_2_4(2147483647)) {
      n21 = Identifier();
           n20 = new NodeChoice(n21, 0);
    } else if (jj_2_5(2147483647)) {
      n22 = RegisterLoad();
           n20 = new NodeChoice(n22, 1);
    } else if (jj_2_6(2147483647)) {
      n23 = MemoryLoad();
           n20 = new NodeChoice(n23, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n25 = jj_consume_token(SEMICOLON);
             n24 = JTBToolkit.makeNodeToken(n25);
    n27 = jj_consume_token(RBRACE);
             n26 = JTBToolkit.makeNodeToken(n27);
     {if (true) return new MethodDeclaration(n0,n2,n3,n4,n6,n8,n10,n12,n14,n16,n18,n20,n24,n26);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterList FormalParameterList() throws ParseException {
   FormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalParameterRest n2;
    n0 = FormalParameter();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_10;
      }
      n2 = FormalParameterRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new FormalParameterList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameter FormalParameter() throws ParseException {
   Type n0;
   Identifier n1;
    n0 = Type();
    n1 = Identifier();
     {if (true) return new FormalParameter(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterRest FormalParameterRest() throws ParseException {
   NodeToken n0;
   Token n1;
   FormalParameter n2;
    n1 = jj_consume_token(58);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FormalParameter();
     {if (true) return new FormalParameterRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RegisterLoad RegisterLoad() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Type n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Type();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Identifier();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new RegisterLoad(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public MemoryLoad MemoryLoad() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Type n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Type();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(MEM_LOAD);
                   n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(LPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(INTEGER_LITERAL);
                           n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(RPAREN);
             n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(RPAREN);
             n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new MemoryLoad(n0,n2,n4,n5,n7,n9,n11,n13,n15);}
    throw new Error("Missing return statement in function");
  }

  static final public MemoryStoreStatement MemoryStoreStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(MEM_STORE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(INTEGER_LITERAL);
                          n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(58);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(SEMICOLON);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new MemoryStoreStatement(n0,n2,n4,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
   NodeChoice n0;
   ArrayType n1;
   BooleanType n2;
   IntegerType n3;
   FloatType n4;
   Identifier n5;
    if (jj_2_7(3)) {
      n1 = ArrayType();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_TYPE:
        n2 = BooleanType();
        n0 = new NodeChoice(n2, 1);
        break;
      case INT_TYPE:
        n3 = IntegerType();
        n0 = new NodeChoice(n3, 2);
        break;
      case FLOAT_TYPE:
        n4 = FloatType();
        n0 = new NodeChoice(n4, 3);
        break;
      case IDENTIFIER:
        n5 = Identifier();
        n0 = new NodeChoice(n5, 4);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayType ArrayType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(INT_TYPE);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ArrayType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatType FloatType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FLOAT_TYPE);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanType BooleanType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(BOOLEAN_TYPE);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerType IntegerType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INT_TYPE);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   Block n1;
   MemoryStoreStatement n2;
   AssignmentStatement n3;
   ArrayAssignmentStatement n4;
   FieldAssignmentStatement n5;
   IfStatement n6;
   WhileStatement n7;
   PrintStatement n8;
   LivenessQueryStatement n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n1 = Block();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_8(2)) {
        n2 = MemoryStoreStatement();
        n0 = new NodeChoice(n2, 1);
      } else if (jj_2_9(2)) {
        n3 = AssignmentStatement();
        n0 = new NodeChoice(n3, 2);
      } else if (jj_2_10(2)) {
        n4 = ArrayAssignmentStatement();
        n0 = new NodeChoice(n4, 3);
      } else if (jj_2_11(2)) {
        n5 = FieldAssignmentStatement();
        n0 = new NodeChoice(n5, 4);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          n6 = IfStatement();
        n0 = new NodeChoice(n6, 5);
          break;
        case WHILE:
          n7 = WhileStatement();
        n0 = new NodeChoice(n7, 6);
          break;
        case PRINT:
          n8 = PrintStatement();
        n0 = new NodeChoice(n8, 7);
          break;
        case SCOMMENT1:
          n9 = LivenessQueryStatement();
        n0 = new NodeChoice(n9, 8);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MEM_STORE:
      case LBRACE:
      case IF:
      case WHILE:
      case PRINT:
      case SCOMMENT1:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_11;
      }
      n3 = Statement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Block(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentStatement AssignmentStatement() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new AssignmentStatement(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAssignmentStatement ArrayAssignmentStatement() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
    n0 = Identifier();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(ASSIGN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(SEMICOLON);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ArrayAssignmentStatement(n0,n1,n3,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public FieldAssignmentStatement FieldAssignmentStatement() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
   NodeToken n7;
   Token n8;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(ASSIGN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new FieldAssignmentStatement(n0,n1,n3,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
   NodeChoice n0;
   IfthenElseStatement n1;
   IfthenStatement n2;
    if (jj_2_12(2147483647)) {
      n1 = IfthenElseStatement();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        n2 = IfthenStatement();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new IfStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IfthenStatement IfthenStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   Identifier n5;
   RegisterLoad n6;
   MemoryLoad n7;
   NodeToken n8;
   Token n9;
   Statement n10;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_13(2147483647)) {
      n5 = Identifier();
           n4 = new NodeChoice(n5, 0);
    } else if (jj_2_14(2147483647)) {
      n6 = RegisterLoad();
           n4 = new NodeChoice(n6, 1);
    } else if (jj_2_15(2147483647)) {
      n7 = MemoryLoad();
           n4 = new NodeChoice(n7, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Statement();
     {if (true) return new IfthenStatement(n0,n2,n4,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public IfthenElseStatement IfthenElseStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   Identifier n5;
   RegisterLoad n6;
   MemoryLoad n7;
   NodeToken n8;
   Token n9;
   Statement n10;
   NodeToken n11;
   Token n12;
   Statement n13;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_16(2147483647)) {
      n5 = Identifier();
           n4 = new NodeChoice(n5, 0);
    } else if (jj_2_17(2147483647)) {
      n6 = RegisterLoad();
           n4 = new NodeChoice(n6, 1);
    } else if (jj_2_18(2147483647)) {
      n7 = MemoryLoad();
           n4 = new NodeChoice(n7, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Statement();
    n12 = jj_consume_token(ELSE);
                n11 = JTBToolkit.makeNodeToken(n12);
    n13 = Statement();
     {if (true) return new IfthenElseStatement(n0,n2,n4,n8,n10,n11,n13);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   Identifier n5;
   RegisterLoad n6;
   MemoryLoad n7;
   NodeToken n8;
   Token n9;
   Statement n10;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_19(2147483647)) {
      n5 = Identifier();
           n4 = new NodeChoice(n5, 0);
    } else if (jj_2_20(2147483647)) {
      n6 = RegisterLoad();
           n4 = new NodeChoice(n6, 1);
    } else if (jj_2_21(2147483647)) {
      n7 = MemoryLoad();
           n4 = new NodeChoice(n7, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Statement();
     {if (true) return new WhileStatement(n0,n2,n4,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintStatement PrintStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   Identifier n5;
   RegisterLoad n6;
   MemoryLoad n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(PRINT);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_22(2147483647)) {
      n5 = Identifier();
           n4 = new NodeChoice(n5, 0);
    } else if (jj_2_23(2147483647)) {
      n6 = RegisterLoad();
           n4 = new NodeChoice(n6, 1);
    } else if (jj_2_24(2147483647)) {
      n7 = MemoryLoad();
           n4 = new NodeChoice(n7, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new PrintStatement(n0,n2,n4,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public LivenessQueryStatement LivenessQueryStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(SCOMMENT1);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LIVENESSQUERY);
                        n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(SCOMMENT2);
                    n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new LivenessQueryStatement(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   NodeChoice n0;
   OrExpression n1;
   AndExpression n2;
   CompareExpression n3;
   neqExpression n4;
   PlusExpression n5;
   MinusExpression n6;
   TimesExpression n7;
   DivExpression n8;
   ArrayLookup n9;
   ArrayLength n10;
   MessageSend n11;
   PrimaryExpression n12;
    if (jj_2_25(2147483647)) {
      n1 = OrExpression();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_26(2147483647)) {
      n2 = AndExpression();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_27(2147483647)) {
      n3 = CompareExpression();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_28(2147483647)) {
      n4 = neqExpression();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_29(2147483647)) {
      n5 = PlusExpression();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_30(2147483647)) {
      n6 = MinusExpression();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_31(2147483647)) {
      n7 = TimesExpression();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_32(2147483647)) {
      n8 = DivExpression();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_33(2147483647)) {
      n9 = ArrayLookup();
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_34(2147483647)) {
      n10 = ArrayLength();
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_35(2147483647)) {
      n11 = MessageSend();
        n0 = new NodeChoice(n11, 10);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case NOT:
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case IDENTIFIER:
        n12 = PrimaryExpression();
        n0 = new NodeChoice(n12, 11);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public AndExpression AndExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(59);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new AndExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public OrExpression OrExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(60);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new OrExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public CompareExpression CompareExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(61);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new CompareExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public neqExpression neqExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(62);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new neqExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public PlusExpression PlusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(PLUS);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new PlusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public MinusExpression MinusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(MINUS);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new MinusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public TimesExpression TimesExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(63);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new TimesExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DivExpression DivExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(64);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new DivExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayLookup ArrayLookup() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
    n0 = Identifier();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ArrayLookup(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayLength ArrayLength() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(LENGTH);
                 n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ArrayLength(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public MessageSend MessageSend() throws ParseException {
   NodeChoice n0;
   Identifier n1;
   RegisterLoad n2;
   MemoryLoad n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   ArgList n10;
   NodeToken n11;
   Token n12;
    if (jj_2_36(2147483647)) {
      n1 = Identifier();
           n0 = new NodeChoice(n1, 0);
    } else if (jj_2_37(2147483647)) {
      n2 = RegisterLoad();
           n0 = new NodeChoice(n2, 1);
    } else if (jj_2_38(2147483647)) {
      n3 = MemoryLoad();
           n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n5 = jj_consume_token(DOT);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
    n8 = jj_consume_token(LPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case IDENTIFIER:
      n10 = ArgList();
        n9.addNode(n10);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    n12 = jj_consume_token(RPAREN);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new MessageSend(n0,n4,n6,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgList ArgList() throws ParseException {
   NodeChoice n0;
   Identifier n1;
   RegisterLoad n2;
   MemoryLoad n3;
   NodeListOptional n4 = new NodeListOptional();
   ArgRest n5;
    if (jj_2_39(2147483647)) {
      n1 = Identifier();
           n0 = new NodeChoice(n1, 0);
    } else if (jj_2_40(2147483647)) {
      n2 = RegisterLoad();
           n0 = new NodeChoice(n2, 1);
    } else if (jj_2_41(2147483647)) {
      n3 = MemoryLoad();
           n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_12;
      }
      n5 = ArgRest();
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
     {if (true) return new ArgList(n0,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgRest ArgRest() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   RegisterLoad n4;
   MemoryLoad n5;
    n1 = jj_consume_token(58);
            n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_42(2147483647)) {
      n3 = Identifier();
           n2 = new NodeChoice(n3, 0);
    } else if (jj_2_43(2147483647)) {
      n4 = RegisterLoad();
           n2 = new NodeChoice(n4, 1);
    } else if (jj_2_44(2147483647)) {
      n5 = MemoryLoad();
           n2 = new NodeChoice(n5, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ArgRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   RegisterLoad n1;
   MemoryLoad n2;
   IntegerLiteral n3;
   FloatLiteral n4;
   TrueLiteral n5;
   FalseLiteral n6;
   Identifier n7;
   ThisExpression n8;
   ArrayAllocationExpression n9;
   AllocationExpression n10;
   NotExpression n11;
    if (jj_2_45(2147483647)) {
      n1 = RegisterLoad();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_46(2147483647)) {
      n2 = MemoryLoad();
        n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        n3 = IntegerLiteral();
        n0 = new NodeChoice(n3, 2);
        break;
      case FLOAT_LITERAL:
        n4 = FloatLiteral();
        n0 = new NodeChoice(n4, 3);
        break;
      case TRUE:
        n5 = TrueLiteral();
        n0 = new NodeChoice(n5, 4);
        break;
      case FALSE:
        n6 = FalseLiteral();
        n0 = new NodeChoice(n6, 5);
        break;
      case IDENTIFIER:
        n7 = Identifier();
        n0 = new NodeChoice(n7, 6);
        break;
      case THIS:
        n8 = ThisExpression();
        n0 = new NodeChoice(n8, 7);
        break;
      default:
        jj_la1[18] = jj_gen;
        if (jj_2_47(3)) {
          n9 = ArrayAllocationExpression();
        n0 = new NodeChoice(n9, 8);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
            n10 = AllocationExpression();
        n0 = new NodeChoice(n10, 9);
            break;
          case NOT:
            n11 = NotExpression();
        n0 = new NodeChoice(n11, 10);
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatLiteral FloatLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FLOAT_LITERAL);
                        n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TrueLiteral TrueLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(TRUE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TrueLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FalseLiteral FalseLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FALSE);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FalseLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ThisExpression ThisExpression() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(THIS);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ThisExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAllocationExpression ArrayAllocationExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT_TYPE);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
    n8 = jj_consume_token(RSQPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new ArrayAllocationExpression(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public AllocationExpression AllocationExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new AllocationExpression(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public NotExpression NotExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   RegisterLoad n4;
   MemoryLoad n5;
    n1 = jj_consume_token(NOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_48(2147483647)) {
      n3 = Identifier();
           n2 = new NodeChoice(n3, 0);
    } else if (jj_2_49(2147483647)) {
      n4 = RegisterLoad();
           n2 = new NodeChoice(n4, 1);
    } else if (jj_2_50(2147483647)) {
      n5 = MemoryLoad();
           n2 = new NodeChoice(n5, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NotExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_3R_28() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT_TYPE)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(60)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(REGISTER_OBJECT)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(59)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(INT_TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(BOOLEAN_TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(FLOAT_TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(SCOMMENT1)) return true;
    if (jj_scan_token(LIVENESSQUERY)) return true;
    if (jj_scan_token(SCOMMENT2)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(INT_TYPE)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(58)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(MEM_STORE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(58)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(MEM_LOAD)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FriendTJMemTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x204000,0x80000000,0x200,0x0,0x200,0x0,0x3800,0x204000,0x0,0x3800,0x200000,0x0,0x204000,0x0,0x40020000,0x20000,0x0,0x0,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x830030,0x0,0x0,0x400,0x0,0x400,0x800000,0x830030,0x4000000,0x800000,0x0,0x30030,0x830030,0x10,0xe0c208,0x800000,0x4000000,0xe0c008,0x200,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[50];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FriendTJMem(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FriendTJMem(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FriendTJMemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FriendTJMem(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new FriendTJMemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FriendTJMem(FriendTJMemTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FriendTJMemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 50; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
