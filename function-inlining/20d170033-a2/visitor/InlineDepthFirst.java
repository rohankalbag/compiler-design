//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class InlineDepthFirst implements GJVisitor<String, String> {
    // Auto class visitors--probably don't need to be overridden.
    private static final boolean debug = false;

    public TypeAnalysis typeAnalysis;
    public CallInfo currCall;
    public List<String> inlinedBody;
    public Node currExpr;
    public int currExprChoice;
    public Node currStatement;
    public int currStatementChoice;
    public Node currPriExpr;
    public int currPriExprChoice;
    public List<String> messageSendArguments;
    public NodeListOptional currArgList;
    public NodeListOptional currBlockStatementList;

    public String visit(NodeList n, String argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeListOptional n, String argu) {
        if (n.present()) {
            String _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this, argu);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public String visit(NodeOptional n, String argu) {
        if (n.present())
            return n.node.accept(this, argu);
        else
            return null;
    }

    public String visit(NodeSequence n, String argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeToken n, String argu) {
        return null;
    }

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public String visit(Goal n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public String visit(MainClass n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        n.f17.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     * | ClassExtendsDeclaration()
     */
    public String visit(TypeDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public String visit(ClassDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public String visit(ClassExtendsDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public String visit(VarDeclaration n, String argu) {
        String _ret = null;
        String type = n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        if (argu == "declarations") {
            inlinedBody.add("\t\t" + type + " " + id + ";" + "\n");
            VarDeclaration currVarDeclaration = new VarDeclaration(n.f0, id);
            currCall.inlineDeclaredVars.add(currVarDeclaration);
        }
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */
    public String visit(MethodDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public String visit(FormalParameterList n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public String visit(FormalParameter n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public String visit(FormalParameterRest n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     * | BooleanType()
     * | IntegerType()
     * | FloatType()
     * | Identifier()
     */
    public String visit(Type n, String argu) {
        String _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public String visit(ArrayType n, String argu) {
        String _ret = "int[]";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "boolean"
     */
    public String visit(BooleanType n, String argu) {
        String _ret = "boolean";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     */
    public String visit(IntegerType n, String argu) {
        String _ret = "int";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "float"
     */
    public String visit(FloatType n, String argu) {
        String _ret = "float";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Block()
     * | AssignmentStatement()
     * | ArrayAssignmentStatement()
     * | IfStatement()
     * | WhileStatement()
     * | PrintStatement()
     */
    public String visit(Statement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        if (argu == "statements") {
            currCall.inlineStatements.add(new Statement(new NodeChoice(currStatement, currStatementChoice)));
        }
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public String visit(Block n, String argu) {
        String _ret = null;
        if (argu == "statements") {
            inlinedBody.add("\t\t{\n");
        }
        currBlockStatementList = new NodeListOptional();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        if (argu == "statements") {
            currStatementChoice = 0;
            inlinedBody.add("\t\t}\n");
            currStatement = new Block(currBlockStatementList);
        }
        currBlockStatementList = null;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public String visit(AssignmentStatement n, String argu) {
        String _ret = null;
        String id = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        if (argu == "statements") {
            currStatementChoice = 1;
            currStatement = new AssignmentStatement(
                    new Identifier(new NodeToken(id)), new Expression(new NodeChoice(currExpr, currExprChoice)));
            if (currBlockStatementList != null) {
                currBlockStatementList.addNode(currStatement);
            }
            inlinedBody.add("\t\t" + id + " = " + expr + ";\n");
        }
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Identifier()
     * f6 -> ";"
     */
    public String visit(ArrayAssignmentStatement n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        String id2 = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        String id3 = n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        if (argu == "statements") {
            currStatementChoice = 2;
            currStatement = new ArrayAssignmentStatement(
                    new Identifier(new NodeToken(id1)),
                    new Identifier(new NodeToken(id2)),
                    new Identifier(new NodeToken(typeAnalysis.addMethodPrefix(currCall, id3))));
            if (currBlockStatementList != null) {
                currBlockStatementList.addNode(currStatement);
            }
            inlinedBody.add("\t\t" + id1 + "["
                    + id2 + "]" + " = "
                    + typeAnalysis.addMethodPrefix(currCall, id3) + ";\n");
        }
        return _ret;
    }

    /**
     * f0 -> IfthenElseStatement()
     * | IfthenStatement()
     */
    public String visit(IfStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        currStatementChoice = 3;
        currStatement = new IfStatement(new NodeChoice(currStatement, currStatementChoice));
        if (currBlockStatementList != null) {
            currBlockStatementList.addNode(currStatement);
        }
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(IfthenStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id1 = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        if (argu == "statements") {
            currStatementChoice = 0;
            Statement currState = new Statement(new NodeChoice(currStatement, currStatementChoice));
            currStatement = new IfthenStatement(
                    new Identifier(new NodeToken(id1)), currState);
            inlinedBody.add("\t\tif (" + id1 + ")" + "\n");
        }
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public String visit(IfthenElseStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        if (argu == "statements") {
            inlinedBody.add("\t\tif (" + id + ")" + "\n");
        }
        n.f4.accept(this, argu);
        Statement currState1 = new Statement(new NodeChoice(currStatement, currStatementChoice));
        n.f5.accept(this, argu);
        if (argu == "statements") {
            inlinedBody.add("\t\telse" + "\n");
        }
        n.f6.accept(this, argu);
        Statement currState2 = new Statement(new NodeChoice(currStatement, currStatementChoice));
        if (argu == "statements") {
            currStatementChoice = 1;
            currStatement = new IfthenElseStatement(
                    new Identifier(new NodeToken(id)), currState1, currState2);
        }
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(WhileStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        if (argu == "statements") {
            currStatementChoice = 4;
            Statement currState = new Statement(new NodeChoice(currStatement, currStatementChoice));
            currStatement = new WhileStatement(
                    new Identifier(new NodeToken(id)), currState);
            if (currBlockStatementList != null) {
                currBlockStatementList.addNode(currStatement);
            }
            inlinedBody.add("\t\twhile (" + id + ")" + "\n");
        }
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> ";"
     */
    public String visit(PrintStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu);
        if (argu == "statements") {
            currStatementChoice = 5;
            currStatement = new PrintStatement(new Identifier(new NodeToken(id)));
            if (currBlockStatementList != null) {
                currBlockStatementList.addNode(currStatement);
            }
            inlinedBody.add("\t\tSystem.out.println(" + id + ")" + ";\n");
        }
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> OrExpression()
     * | AndExpression()
     * | CompareExpression()
     * | NeqExpression()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | DivExpression()
     * | ArrayLookup()
     * | ArrayLength()
     * | MessageSend()
     * | PrimaryExpression()
     */
    public String visit(Expression n, String argu) {
        String _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "&&"
     * f2 -> Identifier()
     */
    public String visit(AndExpression n, String argu) {
        String _ret = null;
        currExprChoice = 0;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " && " + id2;
        currExpr = new AndExpression(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "||"
     * f2 -> Identifier()
     */
    public String visit(OrExpression n, String argu) {
        String _ret = null;
        currExprChoice = 1;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " || " + id2;
        currExpr = new OrExpression(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "<="
     * f2 -> Identifier()
     */
    public String visit(CompareExpression n, String argu) {
        String _ret = null;
        currExprChoice = 2;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " <= " + id2;
        currExpr = new CompareExpression(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "!="
     * f2 -> Identifier()
     */
    public String visit(NeqExpression n, String argu) {
        String _ret = null;
        currExprChoice = 3;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " != " + id2;
        currExpr = new NeqExpression(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "+"
     * f2 -> Identifier()
     */
    public String visit(PlusExpression n, String argu) {
        String _ret = null;
        currExprChoice = 4;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " + " + id2;
        currExpr = new PlusExpression(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "-"
     * f2 -> Identifier()
     */
    public String visit(MinusExpression n, String argu) {
        String _ret = null;
        currExprChoice = 5;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " - " + id2;
        currExpr = new MinusExpression(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "*"
     * f2 -> Identifier()
     */
    public String visit(TimesExpression n, String argu) {
        String _ret = null;
        currExprChoice = 6;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " * " + id2;
        currExpr = new TimesExpression(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "/"
     * f2 -> Identifier()
     */
    public String visit(DivExpression n, String argu) {
        String _ret = null;
        currExprChoice = 7;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " / " + id2;
        currExpr = new DivExpression(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     */
    public String visit(ArrayLookup n, String argu) {
        String _ret = null;
        currExprChoice = 8;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        _ret = id1 + "[" + id2 + "]";
        currExpr = new ArrayLookup(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public String visit(ArrayLength n, String argu) {
        String _ret = null;
        currExprChoice = 9;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        _ret = id1 + "." + "length";
        currExpr = new ArrayLength(new Identifier(new NodeToken(id1)));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public String visit(MessageSend n, String argu) {
        String _ret = null;
        currExprChoice = 10;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        id2 = (id2.split("_"))[1];
        messageSendArguments = new ArrayList<>();
        currArgList = new NodeListOptional();
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        _ret = id1 + "." + id2 + "(";
        NodeOptional sendArguments;
        for (String key : messageSendArguments) {
            _ret += key + ", ";
        }
        _ret = _ret.substring(0, _ret.length() - 2);
        _ret += ")";
        sendArguments = new NodeOptional(currExpr);
        currExpr = new MessageSend(new Identifier(new NodeToken(id1)), new Identifier(new NodeToken(id2)),
                sendArguments);
        messageSendArguments = null;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public String visit(ArgList n, String argu) {
        String _ret = null;
        String id = n.f0.accept(this, argu);
        messageSendArguments.add(id);
        n.f1.accept(this, argu);
        currExpr = new ArgList(new Identifier(new NodeToken(id)), currArgList);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public String visit(ArgRest n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        messageSendArguments.add(id);
        currArgList.addNode(new ArgRest(new Identifier(new NodeToken(id))));
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ThisExpression()
     * | ArrayAllocationExpression()
     * | AllocationExpression()
     * | NotExpression()
     */
    public String visit(PrimaryExpression n, String argu) {
        String _ret = null;
        _ret = n.f0.accept(this, argu);
        currExpr = new PrimaryExpression(new NodeChoice(currPriExpr, currPriExprChoice));
        currExprChoice = 10;
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n, String argu) {
        String _ret = null;
        _ret = n.f0.tokenImage;
        currPriExprChoice = 0;
        currPriExpr = new IntegerLiteral(new NodeToken(_ret));
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public String visit(TrueLiteral n, String argu) {
        String _ret = "true";
        n.f0.accept(this, argu);
        currPriExprChoice = 1;
        currPriExpr = new TrueLiteral();
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public String visit(FalseLiteral n, String argu) {
        String _ret = "false";
        n.f0.accept(this, argu);
        currPriExprChoice = 2;
        currPriExpr = new FalseLiteral();
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Identifier n, String argu) {
        String _ret = typeAnalysis.addMethodPrefix(currCall, n.f0.tokenImage);
        n.f0.accept(this, argu);
        currPriExprChoice = 3;
        currPriExpr = new Identifier(new NodeToken(_ret));
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public String visit(ThisExpression n, String argu) {
        String _ret = "this";
        n.f0.accept(this, argu);
        currPriExprChoice = 4;
        currPriExpr = new ThisExpression();
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public String visit(ArrayAllocationExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String id = n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        currPriExprChoice = 5;
        currPriExpr = new ArrayAllocationExpression(new Identifier(new NodeToken(id)));
        _ret = "new int[" + id + "]";
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public String visit(AllocationExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        currPriExprChoice = 6;
        currPriExpr = new AllocationExpression(new Identifier(new NodeToken(id)));
        _ret = "new " + id + "()";
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public String visit(NotExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        currPriExprChoice = 7;
        currPriExpr = new NotExpression(new Identifier(new NodeToken(id)));
        _ret = "!" + id;
        return _ret;
    }

}
