//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class PrettyPrintDepthFirst implements GJVisitor<String, String> {
    // Auto class visitors--probably don't need to be overridden.
    public boolean debug;

    public String visit(NodeList n, String argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeListOptional n, String argu) {
        if (n.present()) {
            String _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this, argu);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public String visit(NodeOptional n, String argu) {
        if (n.present())
            return n.node.accept(this, argu);
        else
            return null;
    }

    public String visit(NodeSequence n, String argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeToken n, String argu) {
        return null;
    }

    public TypeAnalysis typeAnalysis;
    public List<String> prettyPrint = new ArrayList<>();
    public int curr_call = 0;
    public int old_call;
    public String main_class;
    public List<String> messageSendArguments;
    public boolean isInlinable;
    public Set<String> inlinedFunctionsInBody;
    List<Boolean> hasInlineCall;

    // User-generated visitor methods below

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public String visit(Goal n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public String visit(MainClass n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        typeAnalysis.currClass = n.f1.accept(this, argu);
        main_class = typeAnalysis.currClass;
        typeAnalysis.currMethod = "main";
        prettyPrint.add("class " + typeAnalysis.currClass + " {\n");
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        String args = n.f11.accept(this, argu);
        prettyPrint.add("\tpublic static void main(String[] " + args + ") {\n");
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, "\t");
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        n.f17.accept(this, argu);
        prettyPrint.add("\t}\n");
        prettyPrint.add("}\n\n");
        typeAnalysis.currClass = null;
        typeAnalysis.currMethod = null;
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     * | ClassExtendsDeclaration()
     */
    public String visit(TypeDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public String visit(ClassDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        typeAnalysis.currClass = n.f1.accept(this, argu);
        prettyPrint.add("class " + typeAnalysis.currClass + " {\n");
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        prettyPrint.add("}\n\n");
        typeAnalysis.currClass = null;
        typeAnalysis.currMethod = null;
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public String visit(ClassExtendsDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        typeAnalysis.currClass = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String parentClass = n.f3.accept(this, argu);
        prettyPrint.add("class " + typeAnalysis.currClass + " extends " + parentClass + " {\n");
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        prettyPrint.add("}\n\n");
        typeAnalysis.currClass = null;
        typeAnalysis.currMethod = null;
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public String visit(VarDeclaration n, String argu) {
        String _ret = null;
        String type = n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        if (argu != "\t") {
            prettyPrint.add("\t" + type + " " + id + ";\n");
        } else {
            prettyPrint.add("\t\t" + type + " " + id + ";\n");
        }
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */

    public String visit(MethodDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String ret_type = n.f1.accept(this, argu);
        typeAnalysis.currMethod = n.f2.accept(this, argu);
        prettyPrint.add("\tpublic " + ret_type + " " + typeAnalysis.currMethod + "(");
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        prettyPrint.add(") {\n");
        hasInlineCall = new ArrayList<>();
        inlinedFunctionsInBody = new HashSet<>();
        old_call = curr_call;

        recursiveInlineCheck(n.f8);

        if (debug) {
            System.out.print("curr_method: " + typeAnalysis.currMethod + "\n");
            System.out.println("\thasInlineCall: " + hasInlineCall);
        }

        for (int i = 0; i < hasInlineCall.size(); i++) {
            if (hasInlineCall.get(i)) {
                if (!inlinedFunctionsInBody.contains(typeAnalysis.methodCalls.get(i + old_call).calleeMethod)) {
                    for (VarDeclaration m : typeAnalysis.methodCalls.get(i + old_call).inlineDeclaredVars) {
                        n.f7.nodes.add(m);
                    }
                    inlinedFunctionsInBody.add(typeAnalysis.methodCalls.get(i + old_call).calleeMethod);
                }
            }
        }

        n.f7.accept(this, "\t");
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        String ret_id = n.f10.accept(this, argu);
        prettyPrint.add("\t\treturn " + ret_id + ";\n");
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        prettyPrint.add("\t}\n\n");
        typeAnalysis.currMethod = null;
        return _ret;
    }

    public void recursiveInlineCheck(NodeListOptional n) {
        for (int i = 0; i < n.nodes.size(); i++) {
            Node m = n.nodes.get(i);
            if (((Statement) m).f0.which == 1) {
                AssignmentStatement a = (AssignmentStatement) ((Statement) m).f0.choice;
                if (a.f2.f0.which == 10) {
                    if (debug) {
                        System.out.println("curr_call: " + curr_call);
                        System.out.println("calleeMethod: " + typeAnalysis.methodCalls.get(curr_call).calleeMethod);
                        System.out.println("isInlinable: " + typeAnalysis.methodCalls.get(curr_call).isInlinable);
                        System.out.println("Num of inlineStatements: "
                                + typeAnalysis.methodCalls.get(curr_call).inlineStatements.size());
                    }
                    hasInlineCall.add(typeAnalysis.methodCalls.get(curr_call).isInlinable);
                    if (typeAnalysis.methodCalls.get(curr_call).isInlinable) {
                        n.nodes.remove(i);
                        int curr_i = 0;
                        for (Statement k : typeAnalysis.methodCalls.get(curr_call).inlineStatements) {
                            n.nodes.add(i + curr_i, k);
                            curr_i += 1;
                        }
                        if (debug) {
                            System.out.println("i: " + i);
                            System.out.println("curr_i: " + curr_i);
                        }
                        i += (curr_i - 1);
                    }
                    curr_call += 1;
                }
            } else if (((Statement) m).f0.which == 0) {
                Block b = (Block) ((Statement) m).f0.choice;
                recursiveInlineCheck(b.f1);
            } else if (((Statement) m).f0.which == 3) {
                IfStatement c = (IfStatement) ((Statement) m).f0.choice;
                if (c.f0.which == 1) {
                    IfthenStatement d = (IfthenStatement) c.f0.choice;
                    NodeListOptional e = new NodeListOptional(d.f4);
                    recursiveInlineCheck(e);
                } else {
                    IfthenElseStatement d = (IfthenElseStatement) c.f0.choice;
                    NodeListOptional e = new NodeListOptional(d.f4);
                    e.nodes.add(d.f6);
                    recursiveInlineCheck(e);
                }
            } else if (((Statement) m).f0.which == 4) {
                WhileStatement d = (WhileStatement) ((Statement) m).f0.choice;
                if (d.f4.f0.which == 0) {
                    Block e = (Block) d.f4.f0.choice;
                    recursiveInlineCheck(e.f1);
                }
            }
        }
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public String visit(FormalParameterList n, String argu) {
        String _ret = null;
        String s1 = n.f0.accept(this, argu);
        prettyPrint.add(s1);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public String visit(FormalParameter n, String argu) {
        String _ret = null;
        String s1 = n.f0.accept(this, argu);
        String s2 = n.f1.accept(this, argu);
        _ret = s1 + " " + s2;
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public String visit(FormalParameterRest n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String s2 = n.f1.accept(this, argu);
        prettyPrint.add(", " + s2);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     * | BooleanType()
     * | IntegerType()
     * | FloatType()
     * | Identifier()
     */
    public String visit(Type n, String argu) {
        String _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public String visit(ArrayType n, String argu) {
        String _ret = "int[]";
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "boolean"
     */
    public String visit(BooleanType n, String argu) {
        String _ret = "boolean";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     */
    public String visit(IntegerType n, String argu) {
        String _ret = "int";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "float"
     */
    public String visit(FloatType n, String argu) {
        String _ret = "float";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Block()
     * | AssignmentStatement()
     * | ArrayAssignmentStatement()
     * | IfStatement()
     * | WhileStatement()
     * | PrintStatement()
     */
    public String visit(Statement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public String visit(Block n, String argu) {
        String _ret = null;
        prettyPrint.add(argu + "\t\t{\n");
        n.f0.accept(this, argu);
        n.f1.accept(this, argu + "\t");
        n.f2.accept(this, argu);
        prettyPrint.add(argu + "\t\t}\n");
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public String visit(AssignmentStatement n, String argu) {
        String _ret = null;
        String id = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        prettyPrint.add(argu + "\t\t" + id + " = " + expr + ";\n");
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Identifier()
     * f6 -> ";"
     */
    public String visit(ArrayAssignmentStatement n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        String id3 = n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        prettyPrint.add(argu + "\t\t" + id1 + "[" + id2 + "] = " + id3 + ";\n");
        return _ret;
    }

    /**
     * f0 -> IfthenElseStatement()
     * | IfthenStatement()
     */
    public String visit(IfStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(IfthenStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        prettyPrint.add(argu + "\t\tif(" + id + ")\n");
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public String visit(IfthenElseStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        prettyPrint.add(argu + "\t\tif(" + id + ")\n");
        n.f4.accept(this, argu);
        prettyPrint.add(argu + "\t\telse\n");
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(WhileStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        prettyPrint.add(argu + "\t\twhile(" + id + ")\n");
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> ";"
     */
    public String visit(PrintStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        prettyPrint.add(argu + "\t\tSystem.out.println(" + id + ");\n");
        return _ret;
    }

    /**
     * f0 -> OrExpression()
     * | AndExpression()
     * | CompareExpression()
     * | NeqExpression()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | DivExpression()
     * | ArrayLookup()
     * | ArrayLength()
     * | MessageSend()
     * | PrimaryExpression()
     */
    public String visit(Expression n, String argu) {
        String _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "&&"
     * f2 -> Identifier()
     */
    public String visit(AndExpression n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " && " + id2;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "||"
     * f2 -> Identifier()
     */
    public String visit(OrExpression n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " || " + id2;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "<="
     * f2 -> Identifier()
     */
    public String visit(CompareExpression n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " <= " + id2;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "!="
     * f2 -> Identifier()
     */
    public String visit(NeqExpression n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " != " + id2;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "+"
     * f2 -> Identifier()
     */
    public String visit(PlusExpression n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " + " + id2;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "-"
     * f2 -> Identifier()
     */
    public String visit(MinusExpression n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " - " + id2;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "*"
     * f2 -> Identifier()
     */
    public String visit(TimesExpression n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " * " + id2;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "/"
     * f2 -> Identifier()
     */
    public String visit(DivExpression n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        _ret = id1 + " / " + id2;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     */
    public String visit(ArrayLookup n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        _ret = id1 + "[" + id2 + "]";
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public String visit(ArrayLength n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        _ret = id1 + "." + "length";
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public String visit(MessageSend n, String argu) {
        String _ret = null;
        String id1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu);
        messageSendArguments = new ArrayList<>();
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        _ret = id1 + "." + id2 + "(";
        for (String s : messageSendArguments) {
            _ret += s + ", ";
        }
        if (messageSendArguments.size() > 0)
            _ret = _ret.substring(0, _ret.length() - 2);
        _ret += ")";
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public String visit(ArgList n, String argu) {
        String _ret = null;
        String id = n.f0.accept(this, argu);
        messageSendArguments.add(id);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public String visit(ArgRest n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        messageSendArguments.add(id);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ThisExpression()
     * | ArrayAllocationExpression()
     * | AllocationExpression()
     * | NotExpression()
     */
    public String visit(PrimaryExpression n, String argu) {
        String _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n, String argu) {
        String _ret = n.f0.tokenImage;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public String visit(TrueLiteral n, String argu) {
        String _ret = "true";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public String visit(FalseLiteral n, String argu) {
        String _ret = "false";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Identifier n, String argu) {
        String _ret = n.f0.tokenImage;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public String visit(ThisExpression n, String argu) {
        String _ret = "this";
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public String visit(ArrayAllocationExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String id = n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        _ret = "new int[" + id + "]";
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public String visit(AllocationExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        _ret = "new " + id + "()";
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public String visit(NotExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu);
        _ret = "!" + id;
        return _ret;
    }

}
