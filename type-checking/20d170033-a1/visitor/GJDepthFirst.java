//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJDepthFirst implements GJVisitor<String, String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, String argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, String argu) {
      if (n.present()) {
         String _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public String visit(NodeOptional n, String argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public String visit(NodeSequence n, String argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, String argu) {
      return null;
   }

   // Pre-defined data structures for Assignment-1

   // 1. Symbol Table
   public Map<String, ClassInfo> SymbolTable;

   // 4. To store current class and method
   String currClass;
   String currMethod;
   Stack<List<String>> currArgLists = new Stack<>();

   // 5. Maintaining and printing information about the number of type errors
   int typeErrorCount = 0;

   void typeError() {
      typeErrorCount++;
   }

   void printTypeCheckingResult() {
      if (typeErrorCount > 0) {
         System.out.println("Found " + typeErrorCount + " type errors.");
      } else {
         System.out.println("Program type-checked succesfully.");
      }
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      printTypeCheckingResult();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public String visit(MainClass n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    * | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      currClass = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      currClass = null;
      currMethod = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      currClass = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      currClass = null;
      currMethod = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String ret_type = n.f1.accept(this, argu);
      currMethod = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);

      String actual_ret_type = n.f10.accept(this, argu);

      if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(actual_ret_type)) {
         actual_ret_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(actual_ret_type);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(actual_ret_type)) {
         actual_ret_type = SymbolTable.get(currClass).fieldTypes.get(actual_ret_type);
      }

      boolean isParentCase = false;

      if (SymbolTable.containsKey(actual_ret_type)) {
         ClassInfo class_info = SymbolTable.get(actual_ret_type);
         String parent_class = class_info.parentClass;
         while (parent_class != null) {
            if (parent_class == ret_type) {
               isParentCase = true;
               break;
            }
            ClassInfo parent_class_info = SymbolTable.get(parent_class);
            parent_class = parent_class_info.parentClass;
         }
      }

      if (!(ret_type == actual_ret_type || isParentCase) || ret_type == "eRr0r" || actual_ret_type == "eRr0r") {
         typeError();
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    * | BooleanType()
    * | IntegerType()
    * | Identifier()
    */
   public String visit(Type n, String argu) {
      String _ret = n.f0.accept(this, argu);
      // System.out.println(_ret);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n, String argu) {
      String _ret = "int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n, String argu) {
      String _ret = "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n, String argu) {
      String _ret = "int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    * | AssignmentStatement()
    * | ArrayAssignmentStatement()
    * | FieldStoreStatement()
    * | IfStatement()
    * | WhileStatement()
    * | PrintStatement()
    */
   public String visit(Statement n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n, String argu) {
      String _ret = null;
      String id_type = n.f0.accept(this, argu);
      if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(id_type)) {
         id_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(id_type);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(id_type)) {
         id_type = SymbolTable.get(currClass).fieldTypes.get(id_type);
      }

      n.f1.accept(this, argu);
      String exp_type = n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      boolean isParentCase = false;

      if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(exp_type)) {
         exp_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(exp_type);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(exp_type)) {
         exp_type = SymbolTable.get(currClass).fieldTypes.get(exp_type);
      }

      if (SymbolTable.containsKey(exp_type)) {
         ClassInfo class_info = SymbolTable.get(exp_type);
         String parent_class = class_info.parentClass;
         while (parent_class != null) {
            if (parent_class == id_type) {
               isParentCase = true;
               break;
            }
            ClassInfo parent_class_info = SymbolTable.get(parent_class);
            parent_class = parent_class_info.parentClass;
         }
      }

      if (!(id_type == exp_type || isParentCase) || id_type == "eRr0r" || exp_type == "eRr0r") {
         typeError();
      }

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n, String argu) {
      String _ret = null;
      String arr_type = n.f0.accept(this, argu);
      if (arr_type != "int[]") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(arr_type)) {
            arr_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(arr_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(arr_type)) {
            arr_type = SymbolTable.get(currClass).fieldTypes.get(arr_type);
         }
      }
      n.f1.accept(this, argu);
      String index_type = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String exp_type = n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      if (index_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(index_type)) {
            index_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(index_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(index_type)) {
            index_type = SymbolTable.get(currClass).fieldTypes.get(index_type);
         }
      }

      if (exp_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(exp_type)) {
            exp_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(exp_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(exp_type)) {
            exp_type = SymbolTable.get(currClass).fieldTypes.get(exp_type);
         }
      }

      String arr_ret_type = "int";

      if (!(index_type == "int")) {
         typeError();
         arr_ret_type = "eRr0r";
      }

      if (!(arr_type == "int[]")) {
         typeError();
         arr_ret_type = "eRr0r";
      }

      if (arr_ret_type == "eRr0r") {
         typeError();
      } else {
         if (!(exp_type == "int")) {
            typeError();
         }
      }

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    */
   public String visit(FieldStoreStatement n, String argu) {
      String _ret = null;

      String class_type = n.f0.accept(this, argu);
      if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(class_type)) {
         class_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(class_type);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(class_type)) {
         class_type = SymbolTable.get(currClass).fieldTypes.get(class_type);
      }
      n.f1.accept(this, argu);
      String field_type = null;
      if (SymbolTable.containsKey(class_type)) {
         field_type = SymbolTable.get(class_type).fieldTypes.get(n.f2.accept(this, argu));
      }
      if (field_type == null) {
         typeError();
      }
      n.f3.accept(this, argu);
      String expr_type = n.f4.accept(this, argu);
      if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(expr_type)) {
         expr_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(expr_type);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(expr_type)) {
         expr_type = SymbolTable.get(currClass).fieldTypes.get(expr_type);
      }

      boolean isParentCase = false;

      if (SymbolTable.containsKey(expr_type)) {
         ClassInfo class_info = SymbolTable.get(expr_type);
         String parent_class = class_info.parentClass;
         while (parent_class != null) {
            if (parent_class == field_type) {
               isParentCase = true;
               break;
            }
            ClassInfo parent_class_info = SymbolTable.get(parent_class);
            parent_class = parent_class_info.parentClass;
         }
      }
      n.f5.accept(this, argu);
      if (!(field_type == expr_type || isParentCase) || field_type == "eRr0r" || expr_type == "eRr0r") {
         typeError();
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    * | IfthenStatement()
    */
   public String visit(IfStatement n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(IfthenStatement n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      // check if the condition expression is of type boolean
      String cond_type = n.f2.accept(this, argu);

      if (cond_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(cond_type)) {
            cond_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(cond_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(cond_type)) {
            cond_type = SymbolTable.get(currClass).fieldTypes.get(cond_type);
         }
      }

      if (cond_type != "boolean") {
         typeError();
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfthenElseStatement n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      // check if the condition expression is of type boolean
      String cond_type = n.f2.accept(this, argu);

      if (cond_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(cond_type)) {
            cond_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(cond_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(cond_type)) {
            cond_type = SymbolTable.get(currClass).fieldTypes.get(cond_type);
         }
      }

      if (cond_type != "boolean") {
         typeError();
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      // check if the condition expression is of type boolean
      String cond_type = n.f2.accept(this, argu);

      if (cond_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(cond_type)) {
            cond_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(cond_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(cond_type)) {
            cond_type = SymbolTable.get(currClass).fieldTypes.get(cond_type);
         }
      }

      if (cond_type != "boolean") {
         typeError();
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    * | AndExpression()
    * | CompareExpression()
    * | NeqExpression()
    * | PlusExpression()
    * | MinusExpression()
    * | TimesExpression()
    * | DivExpression()
    * | FieldLookup()
    * | ArrayLookup()
    * | ArrayLength()
    * | MessageSend()
    * | PrimaryExpression()
    */
   public String visit(Expression n, String argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public String visit(AndExpression n, String argu) {
      String _ret = "boolean";
      String op1_type = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String op2_type = n.f2.accept(this, argu);

      if (currClass == null) {
         if (!(op1_type == "boolean" && op2_type == "boolean")) {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      // perform type checking that both are boolean for || operation
      if (op1_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      }

      if (op2_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      }

      if (!(op1_type == "boolean" && op2_type == "boolean")) {
         typeError();
         _ret = "eRr0r";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public String visit(OrExpression n, String argu) {
      String _ret = "boolean";
      String op1_type = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String op2_type = n.f2.accept(this, argu);

      if (currClass == null) {
         if (!(op1_type == "boolean" && op2_type == "boolean")) {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      // perform type checking that both are boolean for || operation
      if (op1_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      }

      if (op2_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      }

      if (!(op1_type == "boolean" && op2_type == "boolean")) {
         typeError();
         _ret = "eRr0r";
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public String visit(CompareExpression n, String argu) {
      String _ret = "boolean";
      String op1_type = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String op2_type = n.f2.accept(this, argu);

      if (currClass == null) {
         if (!(op1_type == "int" && op2_type == "int")) {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      // perform type checking that both are integers for <= operation

      if (op1_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      }

      if (op2_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      }

      if (!(op1_type == "int" && op2_type == "int")) {
         typeError();
         _ret = "eRr0r";
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public String visit(NeqExpression n, String argu) {
      String _ret = "boolean";
      String op1_type = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String op2_type = n.f2.accept(this, argu);
      String iop1_type = null, iop2_type = null, bop1_type = null, bop2_type = null;

      if (currClass == null) {
         if (!((op1_type == "boolean" && op2_type == "boolean") || (op1_type == "int" && op2_type == "int"))) {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      // perform type checking that both are integers or both are boolean for !=
      // operation
      if (op1_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            iop1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            iop1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      } else {
         iop1_type = op1_type;
      }

      if (op2_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            iop2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            iop2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      } else {
         iop2_type = op2_type;
      }

      if (op1_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            bop1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            bop1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      } else {
         bop1_type = op1_type;
      }

      if (op2_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            bop2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            bop2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      } else {
         bop2_type = op2_type;
      }

      String cop1_type = op1_type;
      String cop2_type = op2_type;

      if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
         cop1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
         cop1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
      }

      if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
         cop2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
         cop2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
      }

      boolean OneisParentTwoCase = false;

      if (SymbolTable.containsKey(cop1_type)) {
         ClassInfo class_info = SymbolTable.get(cop1_type);
         String parent_class = class_info.parentClass;
         while (parent_class != null) {
            if (parent_class == cop2_type) {
               OneisParentTwoCase = true;
               break;
            }
            ClassInfo parent_class_info = SymbolTable.get(parent_class);
            parent_class = parent_class_info.parentClass;
         }
      }

      boolean TwoisParentOneCase = false;

      if (SymbolTable.containsKey(cop2_type)) {
         ClassInfo class_info = SymbolTable.get(cop2_type);
         String parent_class = class_info.parentClass;
         while (parent_class != null) {
            if (parent_class == cop1_type) {
               TwoisParentOneCase = true;
               break;
            }
            ClassInfo parent_class_info = SymbolTable.get(parent_class);
            parent_class = parent_class_info.parentClass;
         }
      }

      // System.out.println(op1_type + op2_type);
      // System.out.println(iop1_type + iop2_type + bop1_type + bop2_type);

      if (!((iop1_type == "int" && iop2_type == "int") || (bop1_type == "boolean" && bop2_type == "boolean")
            || (cop1_type == cop2_type) || OneisParentTwoCase || TwoisParentOneCase) || cop1_type == "eRr0r" || cop2_type == "eRr0r") {
         typeError();
         _ret = "eRr0r";
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public String visit(PlusExpression n, String argu) {
      String _ret = "int";
      String op1_type = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String op2_type = n.f2.accept(this, argu);

      if (currClass == null) {
         if (!(op1_type == "int" && op2_type == "int")) {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      // perform type checking that both are integers for + operation
      if (op1_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      }

      if (op2_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      }

      if (!(op1_type == "int" && op2_type == "int")) {
         typeError();
         _ret = "eRr0r";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public String visit(MinusExpression n, String argu) {
      String _ret = "int";
      String op1_type = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String op2_type = n.f2.accept(this, argu);

      if (currClass == null) {
         if (!(op1_type == "int" && op2_type == "int")) {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      // perform type checking that both are integers for - operation
      if (op1_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      }

      if (op2_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      }

      if (!(op1_type == "int" && op2_type == "int")) {
         typeError();
         _ret = "eRr0r";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public String visit(TimesExpression n, String argu) {
      String _ret = "int";
      String op1_type = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String op2_type = n.f2.accept(this, argu);

      // perform type checking that both are integers for * operation

      if (currClass == null) {
         if (!(op1_type == "int" && op2_type == "int")) {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      if (op1_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      }

      if (op2_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      }

      if (!(op1_type == "int" && op2_type == "int")) {
         typeError();
         _ret = "eRr0r";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public String visit(DivExpression n, String argu) {
      String _ret = "int";
      String op1_type = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String op2_type = n.f2.accept(this, argu);

      if (currClass == null) {
         if (!(op1_type == "int" && op2_type == "int")) {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      // perform type checking that both are integers for / operation
      if (op1_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op1_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op1_type)) {
            op1_type = SymbolTable.get(currClass).fieldTypes.get(op1_type);
         }
      }

      if (op2_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(op2_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(op2_type)) {
            op2_type = SymbolTable.get(currClass).fieldTypes.get(op2_type);
         }
      }

      if (!(op1_type == "int" && op2_type == "int")) {
         typeError();
         _ret = "eRr0r";
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public String visit(FieldLookup n, String argu) {
      String _ret = null;
      String class_type = n.f0.accept(this, argu);
      if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(class_type)) {
         class_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(class_type);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(class_type)) {
         class_type = SymbolTable.get(currClass).fieldTypes.get(class_type);
      }
      n.f1.accept(this, argu);
      String field_name = n.f2.accept(this, argu);
      if (SymbolTable.containsKey(class_type)) {
         if (SymbolTable.get(class_type).fieldTypes.containsKey(field_name)) {
            _ret = SymbolTable.get(class_type).fieldTypes.get(field_name);
         } else {
            typeError();
            _ret = "eRr0r";
         }
      } else {
         typeError();
         _ret = "eRr0r";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n, String argu) {
      String _ret = "int";

      // check that the identifier being indexed is integer array
      String arr_type = n.f0.accept(this, argu);
      if (arr_type != "int[]") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(arr_type)) {
            arr_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(arr_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(arr_type)) {
            arr_type = SymbolTable.get(currClass).fieldTypes.get(arr_type);
         }
      }

      if (arr_type != "int[]") {
         typeError();
         _ret = "eRr0r";
      }

      n.f1.accept(this, argu);

      // check that the index is integer
      String index_type = n.f2.accept(this, argu);
      if (index_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(index_type)) {
            index_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(index_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(index_type)) {
            index_type = SymbolTable.get(currClass).fieldTypes.get(index_type);
         }
      }

      if (index_type != "int") {
         typeError();
         _ret = "eRr0r";
      }

      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n, String argu) {
      String _ret = "int";

      // check if the expression contains array to be able to access its length
      String arr_type = n.f0.accept(this, argu);
      if (arr_type != "int[]") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(arr_type)) {
            arr_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(arr_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(arr_type)) {
            arr_type = SymbolTable.get(currClass).fieldTypes.get(arr_type);
         }
      }
      if (arr_type != "int[]") {
         typeError();
         _ret = "eRr0r";
      }

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n, String argu) {
      String _ret = null;
      currArgLists.push(new ArrayList<>());
      String id = n.f0.accept(this, argu);
      // System.out.println(id);
      MethodInfo method_info;
      String method_id = n.f2.accept(this, argu);
      if (SymbolTable.containsKey(id)) {
         n.f1.accept(this, argu);
         method_info = SymbolTable.get(id).methods.get(method_id);
      } else if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(id)) {
         id = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(id);
         n.f1.accept(this, argu);
         method_info = SymbolTable.get(id).methods.get(method_id);
      } else if (SymbolTable.get(currClass).fieldTypes.containsKey(id)) {
         id = SymbolTable.get(currClass).fieldTypes.get(id);
         n.f1.accept(this, argu);
         method_info = SymbolTable.get(id).methods.get(method_id);
      } else {
         n.f1.accept(this, argu);
         String class_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(id);
         if (class_type == null)
            method_info = null;
         else
            method_info = SymbolTable.get(class_type).methods.get(method_id);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      // check if all types in arglist are same
      if (method_info == null) {
         typeError();
         _ret = "eRr0r";
      } else if (method_info.argTypes.size() != currArgLists.peek().size()) {
         typeError();
         _ret = method_info.retType;
      } else {
         int flag = 0;
         for (int i = 0; i < currArgLists.peek().size(); i++) {
            String curr_id = currArgLists.peek().get(i);
            if (method_info.argTypes.get(i) != curr_id) {
               if (SymbolTable.get(currClass).fieldTypes.containsKey(curr_id)) {
                  curr_id = SymbolTable.get(currClass).fieldTypes.get(curr_id);
               } else if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(curr_id)) {
                  curr_id = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(curr_id);
               }
            }
            boolean isParentCase = false;
            if (SymbolTable.containsKey(curr_id)) {
               ClassInfo class_info = SymbolTable.get(curr_id);
               String parent_class = class_info.parentClass;
               while (parent_class != null) {
                  if (parent_class == method_info.argTypes.get(i)) {
                     isParentCase = true;
                     break;
                  }
                  ClassInfo parent_class_info = SymbolTable.get(parent_class);
                  parent_class = parent_class_info.parentClass;
               }
            }
            if (!(curr_id == method_info.argTypes.get(i) || isParentCase)) {
               flag += 1;
            }
         }

         // System.out.println(currArgLists.peek());
         // System.out.println(method_info.argTypes);

         if (flag > 0) {
            typeError();
         }
         _ret = method_info.retType;
      }
      currArgLists.pop();
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public String visit(ExpressionList n, String argu) {
      String _ret = null;
      currArgLists.peek().add(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public String visit(ExpressionRest n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      currArgLists.peek().add(n.f1.accept(this, argu));
      return _ret;
   }

   /**
    * f0 -> TrueLiteral()
    * | FalseLiteral()
    * | IntegerLiteral()
    * | Identifier()
    * | ThisExpression()
    * | ArrayAllocationExpression()
    * | AllocationExpression()
    * | NotExpression()
    * | BracketExpression()
    */
   public String visit(PrimaryExpression n, String argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, String argu) {
      String _ret = "int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n, String argu) {
      String _ret = "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n, String argu) {
      String _ret = "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n, String argu) {
      String _ret = n.f0.tokenImage;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n, String argu) {
      String _ret = currClass;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n, String argu) {
      String _ret = "int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      String expr_type = n.f3.accept(this, argu);

      if (currClass == null) {
         if (expr_type != "int") {
            typeError();
            _ret = "eRr0r";
         }
         return _ret;
      }

      // check that array index is integer
      if (expr_type != "int") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(expr_type)) {
            expr_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(expr_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(expr_type)) {
            expr_type = SymbolTable.get(currClass).fieldTypes.get(expr_type);
         }
      }
      if (expr_type != "int") {
         typeError();
         _ret = "eRr0r";
      }

      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public String visit(NotExpression n, String argu) {
      String _ret = "boolean";
      n.f0.accept(this, argu);

      String expr_type = n.f1.accept(this, argu);
      // block to check that only booleans can be operated by NOT
      if (expr_type != "boolean") {
         if (SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.containsKey(expr_type)) {
            expr_type = SymbolTable.get(currClass).methods.get(currMethod).varparmTypes.get(expr_type);
         } else if (SymbolTable.get(currClass).fieldTypes.containsKey(expr_type)) {
            expr_type = SymbolTable.get(currClass).fieldTypes.get(expr_type);
         }
      }
      if (expr_type != "boolean") {
         typeError();
         _ret = "eRr0r";
      }

      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public String visit(BracketExpression n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}